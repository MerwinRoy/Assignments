/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package user_interface;

import business_model.Fleet;

import business_model.Vehicle;

import java.awt.CardLayout;

import java.util.ArrayList;

import javax.swing.JOptionPane;

import javax.swing.JPanel;

import javax.swing.table.DefaultTableModel;

/**
 *
 * @author merwinroy
 */
public class ViewJPanel extends javax.swing.JPanel {

    /**
     * Creates new form ViewJPanel
     */
    
    //JPanel object
    private final JPanel controlPanel;
    
    //Fleet object
    private final Fleet fleet;
    
    public ViewJPanel(JPanel controlPanel, Fleet fleet) {
        initComponents();
        
        //label to show updates to vehicle record 
        lblUpdateInfo.setText(UpdateJPanel.UpdateTime);
        
        //Fleet object
        this.fleet = fleet;
        
        //JPanel object
        this.controlPanel = controlPanel;
        
        //Function to display table
        populateTable();
        
        //Function to display total number of vehicles that are both available and unavailable
        Availability();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblTitle = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblInfo = new javax.swing.JTable();
        btnRefresh = new javax.swing.JButton();
        btnBack = new javax.swing.JButton();
        lblTotalAvail = new javax.swing.JLabel();
        lblTotalUnavail = new javax.swing.JLabel();
        btnSearch = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        btnFirstAvail = new javax.swing.JButton();
        lblUpdate = new javax.swing.JLabel();
        lblUpdateInfo = new javax.swing.JLabel();
        lblTotalAvailInfo = new javax.swing.JLabel();
        lblTotalUnavailInfo = new javax.swing.JLabel();

        setBackground(new java.awt.Color(204, 204, 255));

        lblTitle.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblTitle.setText("VIEW/SEARCH/DELETE VEHICLE RECORDS");
        lblTitle.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(153, 153, 255), 3));

        tblInfo.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Manufacturer", "Model", "Year of Manufacture", "Serial Number", "City (Available)", "Min.Seats", "Max.Seats", "Availability", "Maintainance Certificate", "Updated"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tblInfo);

        btnRefresh.setText("Refresh Table");
        btnRefresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRefreshActionPerformed(evt);
            }
        });

        btnBack.setText("Back");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });

        lblTotalAvail.setText("Total number of available cars:");

        lblTotalUnavail.setText("Total number of unavailable cars:");

        btnSearch.setText("Search");
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });

        btnDelete.setText("Delete");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        btnFirstAvail.setText("First Available Car");
        btnFirstAvail.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFirstAvailActionPerformed(evt);
            }
        });

        lblUpdate.setText("Last Record Update:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(lblTitle, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jScrollPane1)
            .addGroup(layout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(lblTotalUnavail, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(lblTotalAvail, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(lblTotalAvailInfo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(lblTotalUnavailInfo, javax.swing.GroupLayout.DEFAULT_SIZE, 86, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 432, Short.MAX_VALUE)
                        .addComponent(btnSearch)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnDelete)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnFirstAvail))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnBack)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnRefresh)))
                .addGap(80, 80, 80))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(lblUpdate)
                .addGap(18, 18, 18)
                .addComponent(lblUpdateInfo, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(43, 43, 43)
                .addComponent(lblTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblUpdateInfo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 192, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(27, 27, 27)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblTotalAvailInfo, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(lblTotalAvail)
                                .addComponent(btnSearch)
                                .addComponent(btnDelete)
                                .addComponent(btnFirstAvail)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblTotalUnavailInfo, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(lblTotalUnavail))
                .addGap(43, 43, 43)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnBack, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnRefresh, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnRefreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRefreshActionPerformed
        // TODO add your handling code here:
        
        //Button to refresh and display entire table
        populateTable();
    }//GEN-LAST:event_btnRefreshActionPerformed

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        // TODO add your handling code here
        //Back button to go back to previous panel layout and exit out of ViewJPanel
        
           //Removes current panel
           controlPanel.remove(this);
           
           //Loads previous panel
           CardLayout cardLayout = (CardLayout) controlPanel.getLayout();
           
           cardLayout.previous(controlPanel);
    }//GEN-LAST:event_btnBackActionPerformed

    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchActionPerformed
        // TODO add your handling code here:
        //Button to search for a vehicle record and go to SearchJPanel
        
        //SearchJPanel object with reference to Jpanel and Fleet object
        SearchJPanel searchPanel = new SearchJPanel(controlPanel,fleet);
        
        //SearchJPanel object addedv to controlPanel JPanel object
        controlPanel.add("SearchJPanel", searchPanel);
        
        //SearchJPanel layout loaded into controlPanel
        CardLayout cardLayout = (CardLayout) controlPanel.getLayout();
        
        cardLayout.next(controlPanel);
    }//GEN-LAST:event_btnSearchActionPerformed

    private void btnFirstAvailActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFirstAvailActionPerformed
        // TODO add your handling code here:
        //Button to check which vehicle is available first
        
        //ArrayList to store vehicle objects which are available first
        ArrayList<Vehicle> firstAvailableList = fleet.getFirstAvail();
        
        //Condition to check if any available vehicles exist
        if(firstAvailableList == null) 
        {
            //Prompt displayed if vehicles are unavailable
            JOptionPane.showMessageDialog(null, "No Cars available at this time!");
        }
        else 
        {
            //Table model created if vehicles are available
            DefaultTableModel tableModel = (DefaultTableModel) tblInfo.getModel();
            
            //Row count set to 0
            tableModel.setRowCount(0);
            
            //For loop to iterate through vehicle objects in list
            for(Vehicle vehicle: firstAvailableList) 
            {
                //Rows filled with records of vehicle that are available first
                Object[] row = new Object[10];
                
                row[0] = vehicle;
                
                row[1] = vehicle.getModel();
                
                row[2] = vehicle.getYearOfManufacture();
                
                row[3] = vehicle.getSerial();
                
                row[4] = vehicle.getCity();
                
                row[5] = vehicle.getMin_num_seats();
                
                row[6] = vehicle.getMax_num_seats();
                
                row[7] = vehicle.isAvail();
                
                row[8] = vehicle.isCertificate();
                
                row[9] = vehicle.getCreateStat();
                
                tableModel.addRow(row);
            }
        }
    }//GEN-LAST:event_btnFirstAvailActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        // TODO add your handling code here:
        
        //Delete button created to delete a record from a list in table
        
        //Row selected from table and stored in integer object
        int selectedRow = tblInfo.getSelectedRow();
        
        //Condition to check if row is selected
        if(selectedRow>=0)
        {
            //Selected row containing vehicle object information stored in vehicle object
            Vehicle vehicle = (Vehicle) tblInfo.getValueAt(selectedRow,0);
            
            //vehicle object removed from list
            fleet.deleteVehicle(vehicle);
            
            //Prompt confirming successful deletion of record
            JOptionPane.showMessageDialog(null,"A record has been deleted successfully from the system!");
            
            //Displays table
            populateTable();
        }
    }//GEN-LAST:event_btnDeleteActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnFirstAvail;
    private javax.swing.JButton btnRefresh;
    private javax.swing.JButton btnSearch;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblTitle;
    private javax.swing.JLabel lblTotalAvail;
    private javax.swing.JLabel lblTotalAvailInfo;
    private javax.swing.JLabel lblTotalUnavail;
    private javax.swing.JLabel lblTotalUnavailInfo;
    private javax.swing.JLabel lblUpdate;
    private javax.swing.JLabel lblUpdateInfo;
    private javax.swing.JTable tblInfo;
    // End of variables declaration//GEN-END:variables

    private void populateTable() {
        
        //Table model is created to display table
        DefaultTableModel tableModel = (DefaultTableModel) tblInfo.getModel();
        
        //Row count set to 0
        tableModel.setRowCount(0);
        
        //For loop to iterate through vehicle objects in list
        for(Vehicle vehicle:fleet.getVehicleList())
        {
            //Rows filled with information to display vehicle record in table format
            Object[] row = new Object[10];
            
            row[0] = vehicle;
            
            row[1] = vehicle.getModel();
            
            row[2] = vehicle.getYearOfManufacture();
            
            row[3] = vehicle.getSerial();
            
            row[4] = vehicle.getCity();
            
            row[5] = vehicle.getMin_num_seats();
            
            row[6] = vehicle.getMax_num_seats();
            
            row[7] = vehicle.isAvail();
            
            row[8] = vehicle.isCertificate();
            
            row[9] = vehicle.getCreateStat();
            
            tableModel.addRow(row);
        }
        
    }

    //Function to display total number of available and unavailable vehicles
    private void Availability() {
        
        //ArrayList to store available vehicle objects
        ArrayList<Vehicle> totalAvailList = new ArrayList();
        
        //ArrayList to store unavailable vehicle objects
        ArrayList<Vehicle> totalUnavailList = new ArrayList();
        
        
        totalAvailList = fleet.getTotalAvail();
        totalUnavailList = fleet.getTotalUnAvail();
        
        //retrieving total number of vehicles that are available
        int total_available = totalAvailList.size();
        
        //retrieving total number of vehicles that are unavailable
        int total_unavailable = totalUnavailList.size();
        
        //Converted integer value to string for values to be displayed in labels
        String total1 = Integer.toString(total_available);
        String total2 = Integer.toString(total_unavailable);
        
        lblTotalAvailInfo.setText(total1);
        lblTotalUnavailInfo.setText(total2);
    }
}
