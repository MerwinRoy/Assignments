/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ui;

import java.awt.CardLayout;
import java.util.ArrayList;
import java.util.HashSet;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;
import model.City;
import model.Community;
import model.EncounterHistory;
import model.PatientDirectory;
import model.PersonDirectory;
import model.System1;
import model.VitalSignHistory;

/**
 *
 * @author merwinroy
 */
public class AbnormalJPanel extends javax.swing.JPanel {

    /**
     * Creates new form AbnormalJPanel
     */
    private EncounterHistory eHistory;
    
    private PatientDirectory patientDir;
    
    private VitalSignHistory vHistory;
    
    private Community community;
    
    private City city;
    
    private PersonDirectory personDir;
    
    private JPanel controlPanel;
    private System1 systemList;
    
    
    public AbnormalJPanel(JPanel controlPanel, System1 systemList, EncounterHistory eHistory, VitalSignHistory vHistory, Community community, PersonDirectory personDir, PatientDirectory patientDir, City city) {
        initComponents();
        this.controlPanel = controlPanel;
        this.systemList = systemList;
        this.eHistory = eHistory;
        this.vHistory = vHistory;
        this.patientDir = patientDir;
        this.personDir = personDir;
        this.community = community;
        this.city = city;
        
        totalPatients();
        populateTable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblInfo = new javax.swing.JTable();
        lblTotalNo = new javax.swing.JLabel();
        lblTotal = new javax.swing.JLabel();
        lblAbnormal = new javax.swing.JLabel();
        lblAbnormalNo = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        lblAbnormalByCommunity = new javax.swing.JLabel();
        lblAbnormalNo1 = new javax.swing.JLabel();
        lblBloodPressure = new javax.swing.JLabel();
        txtMinBp = new javax.swing.JTextField();
        txtMaxBp = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        lblCommunity = new javax.swing.JLabel();
        txtCommunity = new javax.swing.JTextField();
        btnCommSearch = new javax.swing.JButton();
        lblInfo = new javax.swing.JLabel();
        btnBack = new javax.swing.JButton();
        btnSearch = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        lblCity = new javax.swing.JLabel();
        txtCity = new javax.swing.JTextField();
        btnCitySearch = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        lblAbnormalNo2 = new javax.swing.JLabel();

        setBackground(new java.awt.Color(204, 204, 255));

        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("ABNORMAL PATIENT RECORDS PANEL");
        jLabel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(153, 153, 255), 3));

        tblInfo.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Patient-ID", "First Name", "Last Name", "Gender", "Age", "Date of Birth", "Phone Number", "House No.", "Street Name", "Community", "City", "Zip", "Blood Pressure", "Temperature", "Pulse", "Check-up Date"
            }
        ));
        jScrollPane1.setViewportView(tblInfo);

        lblTotal.setText("Total Number of Patients:");

        lblAbnormal.setText("Total Abnormal Cases:");

        jLabel2.setText("SEARCH BY:");
        jLabel2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(153, 153, 255), 3));

        lblAbnormalByCommunity.setText("Total Abnormal Cases (By Community):");

        lblBloodPressure.setText("Min/Max Blood Pressure:");

        jLabel5.setText("/");

        lblCommunity.setText("Community:");

        btnCommSearch.setText("Search");
        btnCommSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCommSearchActionPerformed(evt);
            }
        });

        lblInfo.setText("<- Search abnormal patient records based on blood pressure and community");

        btnBack.setText("Back");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });

        btnSearch.setText("Search");
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });

        jLabel3.setText("<- Search through abnormal records based on blood pressure range only");

        lblCity.setText("City:");

        btnCitySearch.setText("Search");
        btnCitySearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCitySearchActionPerformed(evt);
            }
        });

        jLabel4.setText("<- Search abnormal patient records based on blood pressure and city");

        jLabel6.setText("Total Abnormal Cases (By City):");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jScrollPane1)
            .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addComponent(btnBack)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(lblAbnormal, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(lblTotal, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblTotalNo, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblAbnormalNo, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(28, 28, 28)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(lblAbnormalByCommunity, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblAbnormalNo1, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblAbnormalNo2, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(lblBloodPressure)
                                .addGap(18, 18, 18)
                                .addComponent(txtMinBp, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtMaxBp, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lblCommunity, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lblCity))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(txtCommunity, javax.swing.GroupLayout.DEFAULT_SIZE, 115, Short.MAX_VALUE)
                                    .addComponent(txtCity))))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(btnSearch, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnCommSearch, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnCitySearch, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(lblInfo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel3)
                            .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(37, 37, 37)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 203, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(lblTotal, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(lblTotalNo, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(lblAbnormalByCommunity)
                    .addComponent(lblAbnormalNo1, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(lblAbnormal)
                    .addComponent(lblAbnormalNo, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6)
                    .addComponent(lblAbnormalNo2, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblBloodPressure)
                            .addComponent(txtMinBp, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtMaxBp, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel5))
                        .addGap(10, 10, 10)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblCommunity)
                            .addComponent(txtCommunity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnCommSearch)
                            .addComponent(lblInfo))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblCity)
                            .addComponent(txtCity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnCitySearch)
                            .addComponent(jLabel4))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 47, Short.MAX_VALUE)
                        .addComponent(btnBack))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnSearch)
                            .addComponent(jLabel3))
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        // TODO add your handling code here:
        //Removes current panel
        controlPanel.remove(this);
           
        //Loads previous panel
        CardLayout cardLayout = (CardLayout) controlPanel.getLayout();
           
        cardLayout.previous(controlPanel);
    }//GEN-LAST:event_btnBackActionPerformed

    private void btnCommSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCommSearchActionPerformed
        // TODO add your handling code here:
        int counter = 0;
        String communityName = txtCommunity.getText();
        double minBloodPressure = Double.parseDouble(txtMinBp.getText());
        double maxBloodPressure = Double.parseDouble(txtMaxBp.getText());
        
        ArrayList<model.System> anomaly = systemList.getAbnormalCaseListByCommunity(minBloodPressure, maxBloodPressure,communityName);
        
        if(anomaly.equals(""))
        {
            JOptionPane.showMessageDialog(null, "No data available in list");
        }
        else{
                    DefaultTableModel tableModel = (DefaultTableModel) tblInfo.getModel();
        
        //Row count set to 0
        tableModel.setRowCount(0);
        
        for(model.System system:anomaly){
            Object[] row = new Object[15];
            
            row[0] = system;
            
            row[1] = system.getFirstName();
            row[2] = system.getLastName();
            row[3] = system.getSex();
            row[4] = system.getAge();
            row[5] = system.getDob();
            row[6] = system.getContactNum();
                
            row[7] = system.getHouseNumber();
            row[8] = system.getStreetName();
            row[9] = system.getCommunity();
            row[10] = system.getCity();
            row[11] = system.getZip();
            
            row[12] = system.getBloodPressure();
            row[13] = system.getTemperature();
            row[14] = system.getPulse();
            
            tableModel.addRow(row);
            
            counter++;
                 
        }
        lblAbnormalNo1.setText(Integer.toString(counter));
        }
    }//GEN-LAST:event_btnCommSearchActionPerformed

    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchActionPerformed
        // TODO add your handling code here:
                int counter = 0;
        
        double minBloodPressure = Double.parseDouble(txtMinBp.getText());
        double maxBloodPressure = Double.parseDouble(txtMaxBp.getText());
        
        ArrayList<model.System> anomaly = systemList.getAbnormalCaseList(minBloodPressure, maxBloodPressure);
        
        if(anomaly.equals(""))
        {
            JOptionPane.showMessageDialog(null, "No data available in list");
        }
        else{
                    DefaultTableModel tableModel = (DefaultTableModel) tblInfo.getModel();
        
        //Row count set to 0
        tableModel.setRowCount(0);
        
        for(model.System system:anomaly){
            Object[] row = new Object[15];
            
            row[0] = system;
            
            row[1] = system.getFirstName();
            row[2] = system.getLastName();
            row[3] = system.getSex();
            row[4] = system.getAge();
            row[5] = system.getDob();
            row[6] = system.getContactNum();
                
            row[7] = system.getHouseNumber();
            row[8] = system.getStreetName();
            row[9] = system.getCommunity();
            row[10] = system.getCity();
            row[11] = system.getZip();
            
            row[12] = system.getBloodPressure();
            row[13] = system.getTemperature();
            row[14] = system.getPulse();
            
            tableModel.addRow(row);
            
            counter++;
                 
        }
        lblAbnormalNo.setText(Integer.toString(counter));
        }
    }//GEN-LAST:event_btnSearchActionPerformed

    private void btnCitySearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCitySearchActionPerformed
        // TODO add your handling code here:
        int counter = 0;
        String cityName = txtCity.getText();
        double minBloodPressure = Double.parseDouble(txtMinBp.getText());
        double maxBloodPressure = Double.parseDouble(txtMaxBp.getText());
        
        ArrayList<model.System> anomaly = systemList.getAbnormalCaseListByCity(minBloodPressure, maxBloodPressure,cityName);
        
                if(anomaly.equals(""))
        {
            JOptionPane.showMessageDialog(null, "No data available in list");
        }
        else{
                    DefaultTableModel tableModel = (DefaultTableModel) tblInfo.getModel();
        
        //Row count set to 0
        tableModel.setRowCount(0);
        
        for(model.System system:anomaly){
            Object[] row = new Object[15];
            
            row[0] = system;
            
            row[1] = system.getFirstName();
            row[2] = system.getLastName();
            row[3] = system.getSex();
            row[4] = system.getAge();
            row[5] = system.getDob();
            row[6] = system.getContactNum();
                
            row[7] = system.getHouseNumber();
            row[8] = system.getStreetName();
            row[9] = system.getCommunity();
            row[10] = system.getCity();
            row[11] = system.getZip();
            
            row[12] = system.getBloodPressure();
            row[13] = system.getTemperature();
            row[14] = system.getPulse();
            
            tableModel.addRow(row);
            
            counter++;
                 
        }
        lblAbnormalNo2.setText(Integer.toString(counter));
        }
        
    }//GEN-LAST:event_btnCitySearchActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnCitySearch;
    private javax.swing.JButton btnCommSearch;
    private javax.swing.JButton btnSearch;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblAbnormal;
    private javax.swing.JLabel lblAbnormalByCommunity;
    private javax.swing.JLabel lblAbnormalNo;
    private javax.swing.JLabel lblAbnormalNo1;
    private javax.swing.JLabel lblAbnormalNo2;
    private javax.swing.JLabel lblBloodPressure;
    private javax.swing.JLabel lblCity;
    private javax.swing.JLabel lblCommunity;
    private javax.swing.JLabel lblInfo;
    private javax.swing.JLabel lblTotal;
    private javax.swing.JLabel lblTotalNo;
    private javax.swing.JTable tblInfo;
    private javax.swing.JTextField txtCity;
    private javax.swing.JTextField txtCommunity;
    private javax.swing.JTextField txtMaxBp;
    private javax.swing.JTextField txtMinBp;
    // End of variables declaration//GEN-END:variables

    private void totalPatients() {
        HashSet<Integer> uniqueId = new HashSet<>();
        for(model.System system:systemList.getSystemList())
        {
            uniqueId.add(system.getPatientID());
        }
        int total = uniqueId.size();
        String totalString = (Integer.toString(total));
        lblTotalNo.setText(totalString);
    }

    private void populateTable() {
               DefaultTableModel tableModel = (DefaultTableModel) tblInfo.getModel();
        
        //Row count set to 0
        tableModel.setRowCount(0);
        
        for(model.System system:systemList.getSystemList()){
            Object[] row = new Object[15];
            
            row[0] = system;
            
            row[1] = system.getFirstName();
            row[2] = system.getLastName();
            row[3] = system.getSex();
            row[4] = system.getAge();
            row[5] = system.getDob();
            row[6] = system.getContactNum();
                
            row[7] = system.getHouseNumber();
            row[8] = system.getStreetName();
            row[9] = system.getCommunity();
            row[10] = system.getCity();
            row[11] = system.getZip();
            
            row[12] = system.getBloodPressure();
            row[13] = system.getTemperature();
            row[14] = system.getPulse();
            
            tableModel.addRow(row);
        }
    }

}
