/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package userinterface.RestaurantAdminRole;

//import Ecosystem
import Business.EcoSystem;

//Import Company
import Business.Company.Company;

//Import Order
import Business.Order;

//Import Organization
import Business.Organization;

//Import Products
import Business.Company.Products;


//Import UserAccount
import Business.UserAccount.UserAccount;

//Import CardLayout
import java.awt.CardLayout;

//Import JoptionPane
import javax.swing.JOptionPane;

//Import JPanel
import javax.swing.JPanel;

//Import TableModel
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author merwinroy
 */
public class OrderManagementJPanel extends javax.swing.JPanel 
{
    //JPanel container object
    private JPanel container;
    
    //Organization object
    private Organization organization;
    
    //UserAccount object 
    private  UserAccount account;
    
    //Ecosystem object
    private EcoSystem ecoSystem;
    
    //Company object
    private Company company;
    
    /**
     * Creates new form LabAssistantWorkAreaJPanel
     */
    public OrderManagementJPanel(JPanel container,EcoSystem ecoSystem,Company company, Organization organization, UserAccount account) 
    {
        //Initialize components
        initComponents();
        
        this.container = container;
        
        this.account=account;
        
        this.organization=organization;
        
        this.company = company;
        
        this.ecoSystem=ecoSystem;
        
        populateTable();
    }
    
    public void populateTable()
    {
        //Table Model object created
        DefaultTableModel tableModel = (DefaultTableModel) tblOrderInfo.getModel();
        
        //Row count of model set to 0
        tableModel.setRowCount(0);
        
        //for loop to iterate through order in list
        for(Order order:ecoSystem.getOrderDir().getOrderList()) 
        {
            if(order.getResName()!=null && order.getResName().equals(company.getName()))
            {
                Object row[] = new Object[6];
            
                row[0] = order;
            
                row[2] = order.getCustomerName();
            
                row[4] = order.getOrderStatus();
            
                //add row to table model after every iteration
                tableModel.addRow(row);
            }
        }
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tblOrderInfo = new javax.swing.JTable();
        btnRefresh = new javax.swing.JButton();
        btnAssign = new javax.swing.JButton();
        btnAccept = new javax.swing.JButton();
        btnBack = new javax.swing.JButton();
        btnView = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblItems = new javax.swing.JTable();
        lblTitle = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();

        setBackground(new java.awt.Color(204, 204, 255));
        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        tblOrderInfo.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Order Id", "Customer Name", "Status"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tblOrderInfo);
        if (tblOrderInfo.getColumnModel().getColumnCount() > 0) {
            tblOrderInfo.getColumnModel().getColumn(1).setResizable(false);
            tblOrderInfo.getColumnModel().getColumn(2).setResizable(false);
        }

        add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 70, 710, 96));

        btnRefresh.setText("Refresh");
        btnRefresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRefreshActionPerformed(evt);
            }
        });
        add(btnRefresh, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 180, -1, -1));

        btnAssign.setText("Assign Order to Delivery man");
        btnAssign.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAssignActionPerformed(evt);
            }
        });
        add(btnAssign, new org.netbeans.lib.awtextra.AbsoluteConstraints(500, 180, -1, -1));

        btnAccept.setText("Accept Order");
        btnAccept.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAcceptActionPerformed(evt);
            }
        });
        add(btnAccept, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 180, -1, -1));

        btnBack.setText(" Back");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });
        add(btnBack, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 180, -1, -1));

        btnView.setText("View Items");
        btnView.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnViewActionPerformed(evt);
            }
        });
        add(btnView, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 180, -1, -1));

        tblItems.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Item Name", "Price"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(tblItems);

        add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 310, 320, 140));

        lblTitle.setFont(new java.awt.Font("Lucida Grande", 1, 24)); // NOI18N
        lblTitle.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblTitle.setText("ORDER MANAGEMENT PANEL");
        lblTitle.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(153, 153, 255), 3));
        add(lblTitle, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 20, 760, -1));

        jLabel2.setText("ITEM INFORMATION");
        jLabel2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(153, 153, 255), 2));
        add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 240, 760, 30));
    }// </editor-fold>//GEN-END:initComponents

    private void btnRefreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRefreshActionPerformed
        populateTable();
    }//GEN-LAST:event_btnRefreshActionPerformed

    private void btnAssignActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAssignActionPerformed
        // TODO add your handling code here:
        
        //Selected row from table
        int selectedRow = tblOrderInfo.getSelectedRow();
        
        //Prompts error message if no row is selected
        if (selectedRow < 0)
        {
            JOptionPane.showMessageDialog(null,"Please select a row from table to proceed!");
            return;
        }
        
        //Order selected from table row
        Order selectedOrder = (Order)tblOrderInfo.getValueAt(selectedRow, 0);
        
        if(selectedOrder.getOrderStatus().equals("delivered")||selectedOrder.getOrderStatus().equals("order placed"))
        {
            //Show MessageDialog
            JOptionPane.showMessageDialog(null, "This order has already been delivered");
            
            return ; 
        }
        
        if(!selectedOrder.getOrderStatus().equals("accepted"))
        {
            //Show MessageDialog
            JOptionPane.showMessageDialog(null, "Please accept the order");
            
            return ; 
        }
        
        //DeliveryAgentAssignmentJpanel object created
        DeliveryAgentAssignmentJPanel delivAgentAssignmentPanel = new DeliveryAgentAssignmentJPanel(container,selectedOrder,ecoSystem);
        
        //panel object added to container
        container.add("DeliveryAgentAssignmentJPanel", delivAgentAssignmentPanel);
        
        //CardLayout created
        CardLayout layout = (CardLayout) container.getLayout();
        
        //next layout container is loaded
        layout.next(container);
    }//GEN-LAST:event_btnAssignActionPerformed

    private void btnAcceptActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAcceptActionPerformed
        // TODO add your handling code here:
        
        //Selected row from table
        int selectedRow = tblOrderInfo.getSelectedRow();
        
        //Prompts error message if no row is selected
        if (selectedRow < 0)
        {   
            //MessageDialog
            JOptionPane.showMessageDialog(null,"Please select a row from table to proceed!");
            return;
        }
        
        //Order selected from table row
        Order selectedOrder = (Order)tblOrderInfo.getValueAt(selectedRow, 0);
        
        //check if status of order is placed or not and prompt accordingly
        if(!(selectedOrder.getOrderStatus().equals("order placed")))
        {
            //Show Message Dialog
            JOptionPane.showMessageDialog(null, "This order has already been accepted");
            return ; 
        }
        
        //Set order status as accepted
        selectedOrder.setOrderStatus("accepted");
         
        //Prompt user of successful order placement
        JOptionPane.showMessageDialog(null, "Order has been accepted successfully");
    }//GEN-LAST:event_btnAcceptActionPerformed

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        // TODO add your handling code here:
        
        //Current container removed
        container.remove(this);
        
        //Cardlayout object is created
        CardLayout cardLayout = (CardLayout)container.getLayout();
        
        //previous cardlayout is loaded into container
        cardLayout.previous(container);
    }//GEN-LAST:event_btnBackActionPerformed

    private void btnViewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnViewActionPerformed
        // TODO add your handling code here:
        
        //Selected Row from table
       int selectedRow = tblOrderInfo.getSelectedRow();
       
       //If no row is selected, error prompt
       if (selectedRow < 0)
       {
           //Message Dialog
            JOptionPane.showMessageDialog(null, "Please select an order from the table to proceed!"); 
            
            return;
        }
       
       //Order selected from table row
        Order selectedOrder = (Order)tblOrderInfo.getValueAt(selectedRow, 0);
       
        //TableModel object is created
        DefaultTableModel tableModel = (DefaultTableModel) tblItems.getModel();
        
        //Row count of model is set to 0
        tableModel.setRowCount(0);
        
        //For loop to iterate through list of products
        for(Products product:selectedOrder.getProductList()) 
        {
            Object row[] = new Object[2];
            
            row[0] = product;
            
            row[1] = product.getProductPrice();
            
            tableModel.addRow(row);
        }
    
       
        
        
    }//GEN-LAST:event_btnViewActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAccept;
    private javax.swing.JButton btnAssign;
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnRefresh;
    private javax.swing.JButton btnView;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lblTitle;
    private javax.swing.JTable tblItems;
    private javax.swing.JTable tblOrderInfo;
    // End of variables declaration//GEN-END:variables
}
