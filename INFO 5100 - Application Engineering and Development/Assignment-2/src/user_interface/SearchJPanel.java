/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package user_interface;

import business_model.Fleet;

import business_model.Vehicle;

import java.awt.CardLayout;

import java.util.ArrayList;

import java.util.HashSet;

import java.util.Set;

import javax.swing.JOptionPane;

import javax.swing.JPanel;

import javax.swing.table.DefaultTableModel;

/**
 *
 * @author merwinroy
 */
public class SearchJPanel extends javax.swing.JPanel {

    /**
     * Creates new form SearchJPanel
     */
    //JPanel object
    private final JPanel controlPanel;
    
    //Fleet object
    private final Fleet fleet;
    
    //ArrayList of manufacturers
    private ArrayList<String> manufacturers;
    
    
    public SearchJPanel(JPanel controlPanel, Fleet fleet) {
        initComponents();
        
        //controlPanel which is a JPanel object
        this.controlPanel = controlPanel;
        
        //Fleet object
        this.fleet= fleet;
        
        //Function to display table
        populateTable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblInfo = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        lblManufacturer = new javax.swing.JLabel();
        lblModel = new javax.swing.JLabel();
        lblYearOfManufacture = new javax.swing.JLabel();
        lblSerial = new javax.swing.JLabel();
        lblCity = new javax.swing.JLabel();
        lblSeats = new javax.swing.JLabel();
        txtManufacturer = new javax.swing.JTextField();
        txtModel = new javax.swing.JTextField();
        txtYearOfManufacture = new javax.swing.JTextField();
        txtSerial = new javax.swing.JTextField();
        txtCity = new javax.swing.JTextField();
        txtMinSeats = new javax.swing.JTextField();
        lblSlash = new javax.swing.JLabel();
        txtMaxSeats = new javax.swing.JTextField();
        btnYearOfManufacture = new javax.swing.JButton();
        btnManufacturer = new javax.swing.JButton();
        btnModel = new javax.swing.JButton();
        btnSerial = new javax.swing.JButton();
        btnCity = new javax.swing.JButton();
        btnSeats = new javax.swing.JButton();
        btnExpired = new javax.swing.JButton();
        btnValid = new javax.swing.JButton();
        btnListMfg = new javax.swing.JButton();
        btnBack = new javax.swing.JButton();

        setBackground(new java.awt.Color(204, 204, 255));

        jLabel1.setBackground(new java.awt.Color(204, 204, 255));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("SEARCH PANEL");
        jLabel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(153, 153, 255), 3));

        tblInfo.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Manufacturer", "Model", "Year of Manufacture", "Serial Number", "City (Available)", "Min.Seats", "Max.Seats", "Availability", "Maintainance Certificate", "Updated"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                true, true, false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tblInfo);

        jLabel2.setText("SEARCH BY:");
        jLabel2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(153, 153, 255), 2));

        lblManufacturer.setText("Manufacturer:");

        lblModel.setText("Model:");

        lblYearOfManufacture.setText("Year of Manufacture:");

        lblSerial.setText("Serial Number:");

        lblCity.setText("City:");

        lblSeats.setText("Min/Max Seats:");

        txtModel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtModelActionPerformed(evt);
            }
        });

        lblSlash.setText("/");

        btnYearOfManufacture.setText("Search");
        btnYearOfManufacture.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnYearOfManufactureActionPerformed(evt);
            }
        });

        btnManufacturer.setText("Search");
        btnManufacturer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnManufacturerActionPerformed(evt);
            }
        });

        btnModel.setText("Search");
        btnModel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnModelActionPerformed(evt);
            }
        });

        btnSerial.setText("Search");
        btnSerial.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSerialActionPerformed(evt);
            }
        });

        btnCity.setText("Search");
        btnCity.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCityActionPerformed(evt);
            }
        });

        btnSeats.setText("Search");
        btnSeats.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSeatsActionPerformed(evt);
            }
        });

        btnExpired.setText("List Cars with expired maintainance certificates");
        btnExpired.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExpiredActionPerformed(evt);
            }
        });

        btnValid.setText("List Cars with valid maintainance certificates");
        btnValid.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnValidActionPerformed(evt);
            }
        });

        btnListMfg.setText("List Manufacturers of cars stored in system");
        btnListMfg.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnListMfgActionPerformed(evt);
            }
        });

        btnBack.setText("Back");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jScrollPane1)
            .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addGap(60, 60, 60)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblManufacturer)
                    .addComponent(lblModel)
                    .addComponent(lblYearOfManufacture)
                    .addComponent(lblSerial)
                    .addComponent(lblCity)
                    .addComponent(lblSeats))
                .addGap(97, 97, 97)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(txtManufacturer)
                    .addComponent(txtModel)
                    .addComponent(txtYearOfManufacture)
                    .addComponent(txtSerial)
                    .addComponent(txtCity)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(txtMinSeats, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(lblSlash, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtMaxSeats, javax.swing.GroupLayout.DEFAULT_SIZE, 59, Short.MAX_VALUE)))
                .addGap(50, 50, 50)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(btnYearOfManufacture)
                    .addComponent(btnManufacturer)
                    .addComponent(btnModel)
                    .addComponent(btnSerial)
                    .addComponent(btnCity)
                    .addComponent(btnSeats))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 222, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(btnExpired, javax.swing.GroupLayout.PREFERRED_SIZE, 325, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btnValid, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnListMfg, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(btnBack, javax.swing.GroupLayout.Alignment.TRAILING))
                .addGap(79, 79, 79))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 186, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblManufacturer)
                    .addComponent(txtManufacturer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnManufacturer)
                    .addComponent(btnExpired))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblModel)
                    .addComponent(txtModel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnModel)
                    .addComponent(btnValid))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblYearOfManufacture)
                    .addComponent(txtYearOfManufacture, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnYearOfManufacture)
                    .addComponent(btnListMfg))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblSerial)
                    .addComponent(txtSerial, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSerial))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblCity)
                    .addComponent(txtCity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnCity))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 22, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblSeats)
                    .addComponent(txtMinSeats, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblSlash)
                    .addComponent(txtMaxSeats, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSeats)
                    .addComponent(btnBack))
                .addGap(7, 7, 7))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void txtModelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtModelActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtModelActionPerformed

    private void btnCityActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCityActionPerformed
        // TODO add your handling code here:
        
        //When search button for city is clicked, table displays records with city entered in textfield by user
        
        //textfield data stored in string object
        String city = txtCity.getText();
        
        //ArrayList to store vehicle objects from a city searched by user
        ArrayList<Vehicle> cityList = fleet.getAvail_by_City(city);
        
        //Condition to check (validate) that city list is not empty
        if(cityList.equals(""))
        {
            //No vehicle from city entered by user
            JOptionPane.showMessageDialog(null,"No data in list");
            
        }
        else{
            //Table Model is created if condition is satisfied 
            DefaultTableModel tableModel = (DefaultTableModel) tblInfo.getModel();
            
            //Row Count is set to 0
            tableModel.setRowCount(0);
        
            //For loop to iterate through all vehicle objects in the list
            for(Vehicle vehicle:cityList)
            {
                //Rows are filled with vehicle object details
                Object[] row = new Object[10];
                
                row[0] = vehicle;
                
                row[1] = vehicle.getModel();
                
                row[2] = vehicle.getYearOfManufacture();
                
                row[3] = vehicle.getSerial();
                
                row[4] = vehicle.getCity();
                
                row[5] = vehicle.getMin_num_seats();
                
                row[6] = vehicle.getMax_num_seats();
                
                row[7] = vehicle.isAvail();
                
                row[8] = vehicle.isCertificate();
                
                row[9] = vehicle.getCreateStat();
                
                tableModel.addRow(row);
            }
        }
    }//GEN-LAST:event_btnCityActionPerformed

    private void btnSeatsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSeatsActionPerformed
        // TODO add your handling code here:
        
        //When search button for city is clicked, table displays vehicle records with seat range entered in textfield by user

        try
        {   
            //mininum seats retrieved from textfield
            int minSeats = Integer.parseInt(txtMinSeats.getText());
            
            //maximum seats retrieved from textfield
            int maxSeats = Integer.parseInt(txtMaxSeats.getText());
            
            //ArrayList to store vehicle objects with required number of minimum and maximum seats
            ArrayList<Vehicle> seatList = fleet.getSeatsList(maxSeats, minSeats);
            
            //Condition to check whether such vehicle objects exist
            if(seatList.equals(""))
            {
                //No vehicle with seat range entered by user
                JOptionPane.showMessageDialog(null,"No data in list");
            }
            
            else
            {
                //Table Model is created if condition is satisfied
                DefaultTableModel tableModel = (DefaultTableModel) tblInfo.getModel();
                
                //Row Count is set to 0
                tableModel.setRowCount(0);
        
                //For loop to iterate through vehicle objects in list
                for(Vehicle vehicle:seatList)
                {
                   //Rows are filled with vehicle object details
                    Object[] row = new Object[10];
                    
                    row[0] = vehicle;
                    
                    row[1] = vehicle.getModel();
                    
                    row[2] = vehicle.getYearOfManufacture();
                    
                    row[3] = vehicle.getSerial();
                    
                    row[4] = vehicle.getCity();
                    
                    row[5] = vehicle.getMin_num_seats();
                    
                    row[6] = vehicle.getMax_num_seats();
                    
                    row[7] = vehicle.isAvail();
                    
                    row[8] = vehicle.isCertificate();
                    
                    row[9] = vehicle.getCreateStat();
                    
                    tableModel.addRow(row);
                }
            }
            
        }
        catch(NumberFormatException n)
        {
            //If there is an error with numeric entry in textfields, prompt is displayed
            JOptionPane.showMessageDialog(null,"Numeric entry required to search number of seats");
            
        }
        
    }//GEN-LAST:event_btnSeatsActionPerformed

    private void btnExpiredActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExpiredActionPerformed
        // TODO add your handling code here:
        
        //Button which when clicked, lists vehicles with no maintainance certificate
        
        //ArrayList to store vehicle objects with no certificate
        ArrayList<Vehicle> expireList = fleet.getCertificateNeg();
        
        //Check conditions if such vehicles exist in system
        if(expireList.equals(""))
        {
            //Prompt is displayed
            JOptionPane.showMessageDialog(null,"No data in list");
        }
        
        else
        {
            //Table Model is created if condition is fulfilled
            DefaultTableModel tableModel = (DefaultTableModel) tblInfo.getModel();
            
            //Row Count is set to 0
            tableModel.setRowCount(0);
            
            //For loop to iterate through vehicle objects in list
            for(Vehicle vehicle:expireList)
            {
                //Rows are filled with vehicle object details
                Object[] row = new Object[10];
                
                row[0] = vehicle;
                
                row[1] = vehicle.getModel();
                
                row[2] = vehicle.getYearOfManufacture();
                
                row[3] = vehicle.getSerial();
                
                row[4] = vehicle.getCity();
                
                row[5] = vehicle.getMin_num_seats();
                
                row[6] = vehicle.getMax_num_seats();
                
                row[7] = vehicle.isAvail();
                
                row[8] = vehicle.isCertificate();
                
                row[9] = vehicle.getCreateStat();
                
                tableModel.addRow(row);
            }
        }
        
    }//GEN-LAST:event_btnExpiredActionPerformed

    private void btnManufacturerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnManufacturerActionPerformed
        // TODO add your handling code here:
        
        //Search Button to list record of vehicles stored in system with specific manufacturer
        
        //manufacturer name from textfield is stored in string object
        String manufacturer = txtManufacturer.getText();
        
        //ArrayList to store vehicle object of a particular manufacturer searched by user
        ArrayList<Vehicle> manufacturerList = fleet.getManufacturersList(manufacturer);
        
        //checks if such vehicles exist
        if(manufacturerList == null)
        {
            //Prompt is displayed
            JOptionPane.showMessageDialog(null, "No manufacturers available in list");
            
        }
        else
        {
            //Table Model is created if condition is satisfied
            DefaultTableModel tableModel = (DefaultTableModel) tblInfo.getModel();
            
            //Row count is set to 0
            tableModel.setRowCount(0);
            
            //For loop to iterate through vehicle objects in a list
            for(Vehicle vehicle:manufacturerList)
            {
                //Rows are filled with vehicle object details
                Object[] row = new Object[10];
                
                row[0] = vehicle;
                
                row[1] = vehicle.getModel();
                
                row[2] = vehicle.getYearOfManufacture();
                
                row[3] = vehicle.getSerial();
                
                row[4] = vehicle.getCity();
                
                row[5] = vehicle.getMin_num_seats();
                
                row[6] = vehicle.getMax_num_seats();
                
                row[7] = vehicle.isAvail();
                
                row[8] = vehicle.isCertificate();
                
                row[9] = vehicle.getCreateStat();
                
                tableModel.addRow(row);
            }
        }
    }//GEN-LAST:event_btnManufacturerActionPerformed

    private void btnYearOfManufactureActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnYearOfManufactureActionPerformed
        // TODO add your handling code here:
        
        //Button to search vehicle record based on year of manufacture
        
        try
        {
            //Year of manufacture to be searched by user is retrieved from textfield and stored in integer object
            int yearOfManufacture = Integer.parseInt(txtYearOfManufacture.getText());
            
            //ArrayList of vehicle objects to store vehicles object based on their year of manufacture
            ArrayList<Vehicle> manufacturerList = fleet.getMf_list(yearOfManufacture);
            
            //Condition to check if such vehicles exist in list of vehicles in system
            if(manufacturerList == null)
            {
                //Prompt is displayed if no such vehicles exist
                JOptionPane.showMessageDialog(null,"No such data in list");
                
            }
            
            else
            {
                //Table Model is created if condition is satisfied
                DefaultTableModel tableModel = (DefaultTableModel) tblInfo.getModel();
                
                //Row count is set to 0
                tableModel.setRowCount(0);
        
                //For loop to iterate through vehicle objects in list
                for(Vehicle vehicle:manufacturerList)
                {
                    //Rows are filled with vehicle object details
                    Object[] row = new Object[10];
                    
                    row[0] = vehicle;
                    
                    row[1] = vehicle.getModel();
                    
                    row[2] = vehicle.getYearOfManufacture();
                    
                    row[3] = vehicle.getSerial();
                    
                    row[4] = vehicle.getCity();
                    
                    row[5] = vehicle.getMin_num_seats();
                    
                    row[6] = vehicle.getMax_num_seats();
                    
                    row[7] = vehicle.isAvail();
                    
                    row[8] = vehicle.isCertificate();
                    
                    row[9] = vehicle.getCreateStat();
                    
                    tableModel.addRow(row);
                }
            }
        }
        catch(NumberFormatException n)
        {   //Prompt is displayed if there is an error in numeric entry
            JOptionPane.showMessageDialog(null,"Date entry is invalid");
        }
        
    }//GEN-LAST:event_btnYearOfManufactureActionPerformed

    private void btnModelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnModelActionPerformed
        // TODO add your handling code here:
        
        //Button to search vehicle records based on their model
        
        //Model name retrieved from textfield and stored in string object
        String model = txtModel.getText();
        
        //ArrayList to store vehicle objects that are of model being searched by user
        ArrayList<Vehicle> modelList = fleet.getListOfModels(model);
        
        //Condition to check if vehicles of specific model being searched exists in system
        if(modelList.equals(""))
        {
            //Prompt displayed if no such vehicles exist
            JOptionPane.showMessageDialog(null,"No data in list");
        }
        
        else
        {
            //Table Model is created if vehicles of searched model exist
            DefaultTableModel tableModel = (DefaultTableModel) tblInfo.getModel();
            
            //Row count set to 0
            tableModel.setRowCount(0);
        
            //For loop to iterate through vehicles object in list
            for(Vehicle vehicle:modelList)
            {
                //Rows are filled with vehicle object details
                Object[] row = new Object[10];
                
                row[0] = vehicle;
                
                row[1] = vehicle.getModel();
                
                row[2] = vehicle.getYearOfManufacture();
                
                row[3] = vehicle.getSerial();
                
                row[4] = vehicle.getCity();
                
                row[5] = vehicle.getMin_num_seats();
                
                row[6] = vehicle.getMax_num_seats();
                
                row[7] = vehicle.isAvail();
                
                row[8] = vehicle.isCertificate();
                
                row[9] = vehicle.getCreateStat();
                
                tableModel.addRow(row);
            }
        }
    }//GEN-LAST:event_btnModelActionPerformed

    private void btnSerialActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSerialActionPerformed
        // TODO add your handling code here:
        //Button to fetch vehicle record based on their serial number
            try{
                //Serial number from textfield stored in integer object
                int serialNum = Integer.parseInt(txtSerial.getText());
                
                //ArrayList to store vehicle objects with searched serial number
                ArrayList<Vehicle> serialList = fleet.getListOfSerial(serialNum);
        
                //Condition to check whether vehicles with serial number being searched exist
                if(serialList.equals(""))
                {
                    //Prompt displayed if no vehicle with searched serial number exist
                    JOptionPane.showMessageDialog(null,"No data in list");
                }
                else
                {
                    //Table Model is created if vehicles with serail number being searched exist
                    DefaultTableModel tableModel = (DefaultTableModel) tblInfo.getModel();
                    //Row count is set to 0
                    tableModel.setRowCount(0);
        
                for(Vehicle vehicle:serialList)
                {
                    //Rows are filled with vehicle object details
                    Object[] row = new Object[10];
                    
                    row[0] = vehicle;
                    
                    row[1] = vehicle.getModel();
                    
                    row[2] = vehicle.getYearOfManufacture();
                    
                    row[3] = vehicle.getSerial();
                    
                    row[4] = vehicle.getCity();
                    
                    row[5] = vehicle.getMin_num_seats();
                    
                    row[6] = vehicle.getMax_num_seats();
                    
                    row[7] = vehicle.isAvail();
                    
                    row[8] = vehicle.isCertificate();
                    
                    row[9] = vehicle.getCreateStat();
                    
                    tableModel.addRow(row);
                }
            }
        }
        catch(NumberFormatException n)
        {   //Prompt displayed if there is an error with numeric entry
            JOptionPane.showMessageDialog(null,"Invalid Serial entry!");
        }
        
    }//GEN-LAST:event_btnSerialActionPerformed

    private void btnValidActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnValidActionPerformed
        // TODO add your handling code here:
        
        //ArrayList to store vehicle objects with valid certificates
        ArrayList<Vehicle> validList = fleet.getCertificatePos();
        
        //Condition to check if such vehicles are stored in list
        if(validList.equals(""))
        {
            //Prompt displayed if such vehicles dont exist
            JOptionPane.showMessageDialog(null,"No data in list");
            
        }
        else
        {
            //Table model is created if such vehicles are present in systen
            DefaultTableModel tableModel = (DefaultTableModel) tblInfo.getModel();
            
            //Row count is set to 0
            tableModel.setRowCount(0);
            
            //For loop to iterate through vehicle objects in  list
            for(Vehicle vehicle:validList)
            {
                //Rows filled with vehicle details with valid maintainance certificates
                Object[] row = new Object[10];
                
                row[0] = vehicle;
                
                row[1] = vehicle.getModel();
                
                row[2] = vehicle.getYearOfManufacture();
                
                row[3] = vehicle.getSerial();
                
                row[4] = vehicle.getCity();
                
                row[5] = vehicle.getMin_num_seats();
                
                row[6] = vehicle.getMax_num_seats();
                
                row[7] = vehicle.isAvail();
                
                row[8] = vehicle.isCertificate();
                
                row[9] = vehicle.getCreateStat();
                
                tableModel.addRow(row);
            }
        }
    }//GEN-LAST:event_btnValidActionPerformed

    private void btnListMfgActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnListMfgActionPerformed
        // TODO add your handling code here:
        
        //Button to list manufacturers of vehicles in system
        
        //ArrayList to store manufacturer names
        ArrayList<String> allManufacturers = fleet.AllManufacturers();
        
        //hashset of string objects with manufacturer names
        Set<String> hashSet = new HashSet<String>(allManufacturers);
        
        //ArrayList to store hashset of manufacturer names in string form
        ArrayList<String> Mf_List = new ArrayList<>(hashSet);
        
        //Table Model created
        DefaultTableModel tableModel = (DefaultTableModel) tblInfo.getModel();
        
        //Row count set to 0
        tableModel.setRowCount(0);
        
        //For loop to iterate through manufacturer names in arraylist of strings
        for (String manufacturer : Mf_List)
        {
            //To display only manufacturer name in table
            Object[] row = new Object [10];
            
            row[0]=manufacturer;
            
            tableModel.addRow(row);
        }
    }//GEN-LAST:event_btnListMfgActionPerformed

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        // TODO add your handling code here:
        //Back button once clicked will load previous panel layout and exit out of current SearchJPanel
        controlPanel.remove(this);
        
        //layout to load previous layout
        CardLayout cardLayout = (CardLayout) controlPanel.getLayout();
        
        cardLayout.previous(controlPanel);
    }//GEN-LAST:event_btnBackActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnCity;
    private javax.swing.JButton btnExpired;
    private javax.swing.JButton btnListMfg;
    private javax.swing.JButton btnManufacturer;
    private javax.swing.JButton btnModel;
    private javax.swing.JButton btnSeats;
    private javax.swing.JButton btnSerial;
    private javax.swing.JButton btnValid;
    private javax.swing.JButton btnYearOfManufacture;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblCity;
    private javax.swing.JLabel lblManufacturer;
    private javax.swing.JLabel lblModel;
    private javax.swing.JLabel lblSeats;
    private javax.swing.JLabel lblSerial;
    private javax.swing.JLabel lblSlash;
    private javax.swing.JLabel lblYearOfManufacture;
    private javax.swing.JTable tblInfo;
    private javax.swing.JTextField txtCity;
    private javax.swing.JTextField txtManufacturer;
    private javax.swing.JTextField txtMaxSeats;
    private javax.swing.JTextField txtMinSeats;
    private javax.swing.JTextField txtModel;
    private javax.swing.JTextField txtSerial;
    private javax.swing.JTextField txtYearOfManufacture;
    // End of variables declaration//GEN-END:variables

    private void populateTable() {
        //Table model created
        DefaultTableModel tableModel = (DefaultTableModel) tblInfo.getModel();
        
        //Row count set to 0
        tableModel.setRowCount(0);
        
        //For loop to iterate through vehicle objects in list
        for(Vehicle vehicle:fleet.getVehicleList())
        {
            //To display vehicle information in tabular format
            Object[] row = new Object[10];
            
            row[0] = vehicle;
            
            row[1] = vehicle.getModel();
            
            row[2] = vehicle.getYearOfManufacture();
            
            row[3] = vehicle.getSerial();
            
            row[4] = vehicle.getCity();
            
            row[5] = vehicle.getMin_num_seats();
            
            row[6] = vehicle.getMax_num_seats();
            
            row[7] = vehicle.isAvail();
            
            row[8] = vehicle.isCertificate();
            
            row[9] = vehicle.getCreateStat();
            
            tableModel.addRow(row);
        }
    }
}
