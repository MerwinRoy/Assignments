/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package userinterface.CustomerRole;

//Import ecosystem
import Business.EcoSystem;

//import company
import Business.Company.Company;

//import order
import Business.Order;

//import organization
import Business.Organization;

//import user account
import Business.UserAccount.UserAccount;

//import cardlayout
import java.awt.CardLayout;

//import Joption pane
import javax.swing.JOptionPane;

//import Jpanel
import javax.swing.JPanel;

//import table model
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author merwinroy
 */
public class OrderTrackingJPanel extends javax.swing.JPanel
{
    
    //JPanel container object
    private JPanel container;
    
    //Ecosystem object
    private EcoSystem ecoSystem;
    
    //UserAccount object
    private UserAccount account;
    
    
    public OrderTrackingJPanel(JPanel container, UserAccount account, Organization organization, Company company, EcoSystem ecoSystem) 
    {
        //Initialize components
        initComponents();
        
       
        this.container = container;
        
        this.account = account;
        
        this.ecoSystem=ecoSystem;
        
        populateCurrentOrdersTable();
        
        populateOrderHistoryTable();
    }

    public void populateCurrentOrdersTable()
    {
        //Table model object created
        DefaultTableModel tableModel = (DefaultTableModel) tblCurrent.getModel();
        
        //Row count of table model set to 0
        tableModel.setRowCount(0);
        
        //for loop to iterate through order objects from list
        for(Order order:ecoSystem.getOrderDir().getOrderList())
        {
            if(order.getCustomerName()!=null&&order.getCustomerName().equals(account.getUsername()) && !(order.getOrderStatus().equals("order received")))
            {
                Object row[] = new Object[5];
                
                row[0] = order;
                
                row[1] = order.getCustomerName();
             
                row[3] = order.getOrderStatus();
                
                row[4] = order.getResName();
                
                //Add row to model after every iteration
                tableModel.addRow(row);
            }
    
        }
    }
    
    public void populateOrderHistoryTable()
    {
        //Table model object created
        DefaultTableModel tableModel = (DefaultTableModel) tblHistory.getModel();
        
        //Set row count of model to 0
        tableModel.setRowCount(0);
        
        for(Order Order:ecoSystem.getOrderDir().getOrderList())
        {
            if(Order.getCustomerName()!=null&&Order.getCustomerName().equals(account.getUsername()) && Order.getOrderStatus().equals("order received"))
            {
                Object row[] = new Object[5];
                
                row[0] = Order;
                
                row[1] = Order.getCustomerName();
           
                row[3] = Order.getOrderStatus();
                
                row[4] = Order.getResName();
                
                //Add row to model after every iteration
                tableModel.addRow(row);
            }
    
        }
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tblHistory = new javax.swing.JTable();
        btnCancel = new javax.swing.JButton();
        btnBack = new javax.swing.JButton();
        lblCurrent = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblCurrent = new javax.swing.JTable();
        lblHistory = new javax.swing.JLabel();
        btnConfirm = new javax.swing.JButton();
        lblTitle = new javax.swing.JLabel();

        setBackground(new java.awt.Color(204, 204, 255));
        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        tblHistory.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Order Id", "Customer Name", "Status", "Restaurant Name"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.String.class, java.lang.String.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tblHistory);

        add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 300, 730, 110));

        btnCancel.setText("Cancel Order");
        btnCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelActionPerformed(evt);
            }
        });
        add(btnCancel, new org.netbeans.lib.awtextra.AbsoluteConstraints(490, 210, -1, -1));

        btnBack.setText(" Back");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });
        add(btnBack, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 480, -1, -1));

        lblCurrent.setText("Current Orders");
        lblCurrent.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(153, 153, 255), 2));
        add(lblCurrent, new org.netbeans.lib.awtextra.AbsoluteConstraints(3, 56, 840, 30));

        tblCurrent.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Order Id", "Customer Name", "Status", "Restaurant Name"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.String.class, java.lang.String.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(tblCurrent);

        add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 100, 730, 96));

        lblHistory.setText("Order history");
        lblHistory.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(153, 153, 255), 2));
        add(lblHistory, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 260, 840, -1));

        btnConfirm.setText("Confirm Order");
        btnConfirm.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnConfirmActionPerformed(evt);
            }
        });
        add(btnConfirm, new org.netbeans.lib.awtextra.AbsoluteConstraints(650, 210, -1, -1));

        lblTitle.setFont(new java.awt.Font("Lucida Grande", 0, 18)); // NOI18N
        lblTitle.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblTitle.setText("ORDER TRACKING PANEL");
        lblTitle.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(153, 153, 255), 3));
        add(lblTitle, new org.netbeans.lib.awtextra.AbsoluteConstraints(-1, 20, 850, -1));
    }// </editor-fold>//GEN-END:initComponents

    private void btnCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelActionPerformed
        // TODO add your handling code here:
        
        //Selected row from table
        int selectedRow = tblCurrent.getSelectedRow();
        
        //Prompt error if row not selected from table
        if (selectedRow < 0) 
        {
            JOptionPane.showMessageDialog(null, "Please select a row from table to proceed!");
            
            return;
        }
        
        else
        {
            //Order object selected from table
            Order o = (Order)tblCurrent.getValueAt(selectedRow,0 ); 
            
            //delete order 
            ecoSystem.
                    getOrderDir().
                    deleteOrder(o);
            
            //prompt successful deletion from table
            JOptionPane.showMessageDialog(null, "Order has been deleted successfully");
            
            populateCurrentOrdersTable();
        }
    }//GEN-LAST:event_btnCancelActionPerformed

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        // TODO add your handling code here:
        
        //Cardlayout object is created
        CardLayout cardLayout = (CardLayout)container.getLayout();
        
        //current layout removed
        container.remove(this);
        
        //previous container layout is loaded
        cardLayout.previous(container);
    }//GEN-LAST:event_btnBackActionPerformed

    private void btnConfirmActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnConfirmActionPerformed
        // TODO add your handling code here:
        
        //Selected row from table
        int selectedRow = tblCurrent.getSelectedRow();
        
        //prompt error if row from table is not selected
        if (selectedRow < 0) 
        {
            JOptionPane.showMessageDialog(null, "Please select a row from table to proceed!");
            
            return;
        }
        
        Order o = (Order)tblCurrent.getValueAt(selectedRow,0 );
        
        //check order status as delivered
        if (!o.getOrderStatus().equals("delivered")) 
        {
            JOptionPane.showMessageDialog(null, "Sorry, the order has not been delivered yet");
            
            return;
        }
        
        //set order status as received
        o.setOrderStatus("order received");
        
        
        populateOrderHistoryTable();
        
        populateCurrentOrdersTable();
  
    }//GEN-LAST:event_btnConfirmActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnCancel;
    private javax.swing.JButton btnConfirm;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lblCurrent;
    private javax.swing.JLabel lblHistory;
    private javax.swing.JLabel lblTitle;
    private javax.swing.JTable tblCurrent;
    private javax.swing.JTable tblHistory;
    // End of variables declaration//GEN-END:variables
}
