/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package user_interface;

import business_model.Fleet;

import business_model.Vehicle;

import java.awt.CardLayout;

import javax.swing.JOptionPane;

import javax.swing.JPanel;

import javax.swing.table.DefaultTableModel;

/**
 *
 * @author merwinroy
 */
public class UpdateJPanel extends javax.swing.JPanel {

    /**
     * Creates new form UpdateJPanel
     */
    //JPanel object
    private final JPanel controlPanel;
    
    //Fleet object
    private final Fleet fleet;

    //String object to display time
    public static String UpdateTime;
    
    //Vehicle object
    private Vehicle vehicle;
    
    //Constructor with JPanel and Fleet objects as parameters
    public UpdateJPanel(JPanel controlPanel, Fleet fleet) {
        initComponents();
        
        //controlPanel JPanel object
        this.controlPanel = controlPanel;
        
        //Fleet object
        this.fleet = fleet;
        
        //Function to display tables
        populateTable();
    }

    //Getter method to get time of update
    public String getUpdateTime() 
    {
        return UpdateTime;
    }

    //Setter method to set time of update
    public void setUpdateTime(String UpdateTime) 
    {
        UpdateJPanel.UpdateTime = UpdateTime;
    }
    
    //Function to update vehicle details into tables
    private void updateVehicleDetails(){
        
        //Row selected to update
        int selectedRow = tblInfo.getSelectedRow();
        
        //value of vehicle retrieved from selected row and stored in vehicle object
        vehicle = (Vehicle) tblInfo.getValueAt(selectedRow,0);
        
        //TextFields are set with values of vehicle details to be updated
        txtManufacturer.setText(vehicle.getManufacturer());
        
        txtModel.setText(vehicle.getModel());
        
        txtYearOfManufacture.setText(String.valueOf(vehicle.getYearOfManufacture()));
        
        txtCity.setText(vehicle.getCity());
        
        txtSerial.setText(String.valueOf(vehicle.getSerial()));
        
        txtMaxSeats.setText(String.valueOf(vehicle.getMax_num_seats()));
        
        txtMinSeats.setText(String.valueOf(vehicle.getMin_num_seats()));
        
        //Radiobuttons set as per vehicle records selected which are to be updated later
        if(vehicle.isCertificate()==true)
        {
            rbYesCertificate.setSelected(true);
            
        }
        else 
        {
            rbNoCertificate.setSelected(true);
            
        }
        
        if(vehicle.isAvail()==true)
        {
            rbYesAvail.setSelected(true);
            
        }
        else 
        {
            rbNoAvail.setSelected(true);
        }
        
    }
    
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroupAvail = new javax.swing.ButtonGroup();
        buttonGroupCertificate = new javax.swing.ButtonGroup();
        lblTitle = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblInfo = new javax.swing.JTable();
        lblManufacturer = new javax.swing.JLabel();
        lblModel = new javax.swing.JLabel();
        lblYearOfManufacture = new javax.swing.JLabel();
        lblCity = new javax.swing.JLabel();
        lblMaxSeats = new javax.swing.JLabel();
        lblMinSeats = new javax.swing.JLabel();
        lblAvail = new javax.swing.JLabel();
        lblCertificate = new javax.swing.JLabel();
        txtManufacturer = new javax.swing.JTextField();
        txtModel = new javax.swing.JTextField();
        txtYearOfManufacture = new javax.swing.JTextField();
        txtCity = new javax.swing.JTextField();
        txtMaxSeats = new javax.swing.JTextField();
        txtMinSeats = new javax.swing.JTextField();
        btnBack = new javax.swing.JButton();
        btnUpdate = new javax.swing.JButton();
        btnSave = new javax.swing.JButton();
        rbYesAvail = new javax.swing.JRadioButton();
        rbNoAvail = new javax.swing.JRadioButton();
        rbYesCertificate = new javax.swing.JRadioButton();
        rbNoCertificate = new javax.swing.JRadioButton();
        jLabel1 = new javax.swing.JLabel();
        txtSerial = new javax.swing.JTextField();

        setBackground(new java.awt.Color(204, 204, 255));

        lblTitle.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblTitle.setText("UPDATE PANEL");
        lblTitle.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(153, 153, 255), 3));

        tblInfo.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Manufacturer", "Model", "Year of Manufacture", "Serial Number", "City (Available)", "Min.Seats", "Max.Seats", "Availability", "Maintainance Certificate", "Updated"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tblInfo);

        lblManufacturer.setText("Manufacturer:");

        lblModel.setText("Model:");

        lblYearOfManufacture.setText("Year Of Manufacture:");

        lblCity.setText("City (Available):");

        lblMaxSeats.setText("Max.Seats");

        lblMinSeats.setText("Min.Seats:");

        lblAvail.setText("Availability:");

        lblCertificate.setText("Maintainance Certificate:");

        txtManufacturer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtManufacturerActionPerformed(evt);
            }
        });

        txtCity.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtCityActionPerformed(evt);
            }
        });

        txtMinSeats.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtMinSeatsActionPerformed(evt);
            }
        });

        btnBack.setText("Back");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });

        btnUpdate.setText("Update");
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });

        btnSave.setText("Save");
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });

        buttonGroupAvail.add(rbYesAvail);
        rbYesAvail.setText("Yes");

        buttonGroupAvail.add(rbNoAvail);
        rbNoAvail.setText("No");

        buttonGroupCertificate.add(rbYesCertificate);
        rbYesCertificate.setText("Yes");

        buttonGroupCertificate.add(rbNoCertificate);
        rbNoCertificate.setText("No");

        jLabel1.setText("Serial Number:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(lblTitle, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jScrollPane1)
            .addGroup(layout.createSequentialGroup()
                .addGap(57, 57, 57)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnBack)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblManufacturer)
                            .addComponent(lblModel)
                            .addComponent(lblYearOfManufacture)
                            .addComponent(lblCity))
                        .addGap(147, 147, 147)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(txtModel, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtYearOfManufacture, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtCity, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 176, Short.MAX_VALUE)
                            .addComponent(txtManufacturer))
                        .addGap(85, 85, 85)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblMaxSeats)
                            .addComponent(lblMinSeats)
                            .addComponent(lblAvail)
                            .addComponent(lblCertificate))
                        .addGap(29, 29, 29)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtMinSeats, javax.swing.GroupLayout.PREFERRED_SIZE, 176, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtMaxSeats, javax.swing.GroupLayout.PREFERRED_SIZE, 176, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(rbYesAvail)
                                .addGap(18, 18, 18)
                                .addComponent(rbNoAvail))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(rbYesCertificate)
                                .addGap(18, 18, 18)
                                .addComponent(rbNoCertificate)))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 29, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnUpdate)
                        .addGap(44, 44, 44)
                        .addComponent(btnSave))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(18, 18, 18)
                        .addComponent(txtSerial)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addComponent(lblTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 229, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblManufacturer)
                    .addComponent(txtManufacturer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblMaxSeats)
                    .addComponent(txtMaxSeats, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1)
                    .addComponent(txtSerial, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblModel)
                    .addComponent(txtModel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblMinSeats)
                    .addComponent(txtMinSeats, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblYearOfManufacture)
                    .addComponent(txtYearOfManufacture, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblAvail)
                    .addComponent(rbYesAvail)
                    .addComponent(rbNoAvail))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblCity)
                    .addComponent(txtCity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblCertificate)
                    .addComponent(rbYesCertificate)
                    .addComponent(rbNoCertificate))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 28, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnBack)
                    .addComponent(btnUpdate)
                    .addComponent(btnSave))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void txtManufacturerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtManufacturerActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtManufacturerActionPerformed

    private void txtCityActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtCityActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtCityActionPerformed

    private void txtMinSeatsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtMinSeatsActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtMinSeatsActionPerformed

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        // TODO add your handling code here:
        //Back button to go back to previous panel and exit out of UpdateJPanel
        
        //Current Panel layout removed
        controlPanel.remove(this);
        
        //Previous panel layout is loaded 
        CardLayout cardLayout = (CardLayout) controlPanel.getLayout();
        cardLayout.previous(controlPanel);
    }//GEN-LAST:event_btnBackActionPerformed

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
        // TODO add your handling code here:
        //Update button to modify or make changes to existing record
        updateVehicleDetails();
    }//GEN-LAST:event_btnUpdateActionPerformed

    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed
        // TODO add your handling code here:
        try
        {
            //Validation for empty textfields
            if(txtCity.getText().equals("") || txtManufacturer.getText().equals("") || txtMaxSeats.getText().equals("") || txtMinSeats.getText().equals("") || txtModel.getText().equals("") || txtSerial.getText().equals("") || txtYearOfManufacture.getText().equals(""))
            {
                //Prompts if empty fields are present
                JOptionPane.showMessageDialog(null,"Fields cannot be empty");
            }
            else
            {
                //If all textfields are filled, vehicle object attributes are set with values of textfield for successful update
                vehicle.setManufacturer(txtManufacturer.getText());
                
                vehicle.setModel(txtModel.getText());
                
                vehicle.setYearOfManufacture(Integer.parseInt(txtYearOfManufacture.getText()));
                
                vehicle.setCity(txtCity.getText());
                
                vehicle.setSerial(Integer.parseInt(txtSerial.getText()));
                
                vehicle.setMax_num_seats(Integer.parseInt(txtMaxSeats.getText()));
                
                vehicle.setMin_num_seats(Integer.parseInt(txtMinSeats.getText()));
                
                //Yes Radiobutton for certificate sets vehicle objects certificate attribute to true
                if(rbYesCertificate.isSelected() == true)
                {
                    vehicle.setCertificate(true);
                }
                
                //No Radiobutton for certificate sets vehicle objects certificate attribute to false
                if (rbNoCertificate.isSelected() == true)
                {
                    vehicle.setCertificate(false);
                }
                
                //Yes radiobutton for availability sets vehicle objects certificate attribute to true
                if(rbYesAvail.isSelected()==true)
                {
                    vehicle.setAvail(true);
                }
                
                //No radiobutton for availability sets vehicle objects certificate attribute to false
                if (rbNoAvail.isSelected()==true)
                {
                    vehicle.setAvail(false);
                }
            }
            //Displays table after update
            populateTable();
            
            //Prompts user of successful update and save to changes made
            JOptionPane.showMessageDialog(null,"Records updated and saved successfully!");
        }
        catch(NumberFormatException n)
        {
            //Prompts user if numeric entry is invalid in textfield
            JOptionPane.showMessageDialog(null,"Invalid numeric entry");
        }
    }//GEN-LAST:event_btnSaveActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnSave;
    private javax.swing.JButton btnUpdate;
    private javax.swing.ButtonGroup buttonGroupAvail;
    private javax.swing.ButtonGroup buttonGroupCertificate;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblAvail;
    private javax.swing.JLabel lblCertificate;
    private javax.swing.JLabel lblCity;
    private javax.swing.JLabel lblManufacturer;
    private javax.swing.JLabel lblMaxSeats;
    private javax.swing.JLabel lblMinSeats;
    private javax.swing.JLabel lblModel;
    private javax.swing.JLabel lblTitle;
    private javax.swing.JLabel lblYearOfManufacture;
    private javax.swing.JRadioButton rbNoAvail;
    private javax.swing.JRadioButton rbNoCertificate;
    private javax.swing.JRadioButton rbYesAvail;
    private javax.swing.JRadioButton rbYesCertificate;
    private javax.swing.JTable tblInfo;
    private javax.swing.JTextField txtCity;
    private javax.swing.JTextField txtManufacturer;
    private javax.swing.JTextField txtMaxSeats;
    private javax.swing.JTextField txtMinSeats;
    private javax.swing.JTextField txtModel;
    private javax.swing.JTextField txtSerial;
    private javax.swing.JTextField txtYearOfManufacture;
    // End of variables declaration//GEN-END:variables

    //Function to display table
    private void populateTable() {
       
        //TableModel is created
        DefaultTableModel tableModel = (DefaultTableModel) tblInfo.getModel();
        //Row is set to 0
        tableModel.setRowCount(0);
        
        //For loop to iterate through vehicle objects in list
        for(Vehicle vehicle: fleet.getVehicleList()) 
        {
                //Rows are filled with vehicle record details and display in table format
                Object[] row = new Object[10];
                
                row[0] = vehicle;
                
                row[1] = vehicle.getModel();
                
                row[2] = vehicle.getYearOfManufacture();
                
                row[3] = vehicle.getSerial();
                
                row[4] = vehicle.getCity();
                
                row[5] = vehicle.getMin_num_seats();
                
                row[6] = vehicle.getMax_num_seats();
                
                row[7] = vehicle.isAvail();
                
                row[8] = vehicle.isCertificate();
                
                row[9] = vehicle.getCreateStat();
                
                tableModel.addRow(row);
        }
    }
}
